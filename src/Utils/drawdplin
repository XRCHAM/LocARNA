#!/usr/bin/env perl

############################################################
##
## draw a linear represenation of basepairs in a dotplot file
## generates a postscript drawing
##
## USAGE: $0 <dp >ps
##
## ##########################################################


use warnings;
use strict;

##------------------------------------------------------------
## options
use Getopt::Long;
use Pod::Usage;


my $minprob=1e-6; ## minimal probability for filtering arcs
my $probwidth=0; ## factor for drawing arcs differently by their prob.

my $help;
my $man;
my $quiet;
my $verbose;
my $write_sequence;
my $fontsize=3;
my $vertical;
my $web;
my $nolabels;

## Getopt::Long::Configure("no_ignore_case");

GetOptions("minprob=f" => \$minprob,
           "probwidth=f" => \$probwidth,
           "write-sequence" => \$write_sequence,
           "fontsize=i" => \$fontsize,
           "vertical" => \$vertical,
           "nolabels" => \$nolabels,
           "web" => \$web,
           "verbose" => \$verbose,
           "quiet" => \$quiet,
           "help"=> \$help,
           "man" => \$man
          ) || pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

## ------------------------------------------------------------
## main part

my $stretch = 500;

my $date=`date`;

my $seqlength;

my $fontoffset=$fontsize+2;

if ($web) {
    $vertical=1;
    $nolabels=1;
}

my $sequence="";
while (my $line = <STDIN>) {
    if ( $line =~ /^\/sequence/ ) {
        while (($line=<STDIN>) !~ /def$/ ) {
            $line =~ s/[^A-Za-z-]//g;
            $sequence.=$line;
        }
	chomp $sequence;
        $seqlength = length($sequence);
        last;
    }
}

my $bounding_box="-10 -$fontoffset 510 125";
my $rotate="";
my $rotate_back="90 rotate";
my $lengthadd=0;

if (defined($vertical)) {
    $stretch = 432.0;
    $rotate="%% rotate and translate the page
-90 rotate
-$stretch $stretch $seqlength 1 add div add 0 translate
";
    $rotate_back="";

    $bounding_box="-$fontoffset -10 125 $stretch";
    $lengthadd=2;
}

sub transformcoor {
    my ($i) = @_;
    return ($i-1) * $stretch/($seqlength-1+$lengthadd);
}

print
"%!PS-Adobe-3.0 EPSF-3.0
%%CreationDate: Tue Jul 18 16:17:35 CEST 2006
%%Title: rna
%%Creator: Sebastian Will
%%Pages: 1
%%BoundingBox: $bounding_box
%%EndComments

%%BeginProlog

/MyDict 100 dict def

/arc {
    /y exch def
    /x exch def
    /h y x sub 0.3 mul def
    /o y x sub 0.05 mul def

    newpath
    x 0 moveto
    x o add h y o sub h y 0 curveto
    stroke
} bind def

1 setlinewidth
0 0 0 setrgbcolor

%%Page: 1 1
MyDict begin

$rotate

%% sequence base line
newpath
-2 0 moveto
$stretch $seqlength 1 sub $lengthadd add div $seqlength 1 sub mul 2 add  0 lineto
stroke

0.25 setlinewidth

/fsize $fontsize def
/Helvetica findfont fsize scalefont setfont


%% arcs
";


while (my $line = <STDIN>) {
    if( $line =~ /(\d+)\s+(\d+)\s+([\d.]+)\s+ubox/ ) {
        my $i=$1;
        my $j=$2;
	my $p=$3*$3;

	if ($probwidth>0) {
	    my $width=$p * $probwidth;
	    print "$width setlinewidth\n";
	}

	if ( $p >= $minprob) {
	    my $x = transformcoor $i;
	    my $y = transformcoor $j;

	    printf "$x $y arc\n";
	}
    }
}

print "0.25 setlinewidth\n";

my $modulo = int(int($seqlength/30)/5)*5;

if ($modulo==0 || $write_sequence) {$modulo=1;}

for (my $i=1; $i<=$seqlength; $i++) {
    my $x = transformcoor $i;
    my $c = substr $sequence,$i-1,1;
    if ($i%$modulo == 0) {
	print "$x 0 moveto $x -2 lineto stroke\n";

	my $c=$i;
	if ($write_sequence) {
	    $c=substr $sequence,$i-1,1;
	}

	my $x1=$x-$fontsize/4*length($c);
	my $y1=-$fontsize;
        if (! defined($nolabels) ) {
            print "$x1 $y1 moveto ($c) show\n";
        }
    } else {
	print "$x 0 moveto $x -1 lineto stroke\n";
    }
}

print
"$rotate_back
%%PageTrailer
showpage
%%Trailer
end
%%EOF
";


## ------------------------------------------------------------

__END__

=head1 NAME

drawdplin

=head1 SYNOPSIS

drawdplin [options]

Options:

        --minprob        cutoff probability
        --probwidth      depency of arc drawing on their probability
        --write-sequence output sequence labels instead of position indices
        --fontsize       set font size
        --vertical       draw vertical
        --nolabels       suppress labels
        --web            use exact settings for CARNA web server

        --help           brief help message
        --man            full documentation
        --verbose        be verbose
        --quiet          be quiet

=head1 DESCRIPTION

Draws ensemble base pair probabilities in a linear
representation. Reads dot plot ps file (like written by RNAfold -p)
from stdin and writes ps file to standard out.

=cut
